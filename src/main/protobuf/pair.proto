syntax = "proto3";
import "communicationinfo.proto";
import "parameterrange.proto";

package derec.message;
/*
* ----------------------------------------------------------------------------
* Pairing protocol
* First message sent from the pairing initiator to the pairing
* responder. There would earlier have been a ContactMessage sent
* from the responder to the initiator by some other means. For example,
* the responder could display a QR code that the initiator scanned.
* The initiator can be helper or sharer, and
* the responder can be helper or sharer.
* ----------------------------------------------------------------------------
*/
message PairRequestMessage {
  /**
   * Is the sharer in recovery mode (or adding a new secret), and so
   * possibly reconnecting to an old helper?
   */
  bool recoveryMode = 1;

  /**
   * public key used for signatures of messages from the initiator;
   */
  bytes publicSignatureKey = 2;

  /**
   * public key used for encrypting messages to the initiator;
   */
  bytes publicEncryptionKey = 3;

  /**
   * senderâ€™s app-readable contact information,
   * such as name, phone number, etc.
   */
  CommunicationInfo communicationInfo = 4;

  /**
   * 32-byte (random) nonce to identify the pairing session
   */
  bytes nonce = 5;

  /**
   * Sharer and Helper parameter ranges.
   * The sharer will set sharerParameterRange to something,
   * and leave the other empty. The helper will do the opposite.
   */
  ParameterRange sharerParameterRange = 6;
  ParameterRange helperParameterRange = 7;
}

/**
 * Response, which is identical to the request, except without the
 * public encryption key, because it already happened during contact.
 */
message PairResponseMessage {
  /**
   * Is the responder in recovery mode?
   */
  bool recoveryMode = 1;
  /**
   * public signature key (byte array supports many schemes) of the responder
   */
  bytes publicSignatureKey = 2;

  /**
   * app-readable contact information (e.g. name, phone number, etc.)
   */
  CommunicationInfo communicationInfo = 3;

  /**
   * 32-byte (random) nonce to identify the pairing session;
   * this is the same value as sent in the pairing request
   */
  bytes nonce = 4;

  /**
   * Sharer and Helper parameter.
   * The sharer will set sharerParameterRange to something,
   * and leave the other empty. The helper will do the opposite.
   */
  ParameterRange sharerParameterRange = 5;
  ParameterRange helperParameterRange = 6;
}
